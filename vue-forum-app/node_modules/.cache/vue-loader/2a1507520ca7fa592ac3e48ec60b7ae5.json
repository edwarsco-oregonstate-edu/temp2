{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/RegisterForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/RegisterForm.vue","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { required, email } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      role: 'user',\n      moderateCategory: '',\n      serverErrorMessage: '',\n      loading: false,\n      loadingCategories: false\n    }\n  },\n\n  validations: {\n    name: { required },\n    email: { required, email },\n    password: { required }\n  },\n\n  computed: {\n    ...mapState({\n      categories: state => state.categories.all\n    }),\n\n    roleOptions () {\n      return [\n        { key: 'user', title: 'User' },\n        { key: 'moderator', title: 'Moderator' },\n        { key: 'admin', title: 'Admin' }\n      ]\n    },\n\n    categoryOptions () {\n      return this.loadingCategories\n        ? []\n        : this.categories.map(category => ({\n          key: category.slug,\n          title: category.title\n        }))\n    }\n  },\n\n  async mounted () {\n    this.loadingCategories = true\n    await this.loadCategories()\n    this.loadingCategories = false\n    if (this.role === 'moderator') {\n      this.moderateCategory = this.categoryOptions[0].key\n    }\n  },\n\n  watch: {\n    role (role) {\n      this.moderateCategory = role === 'moderator'\n        ? this.categoryOptions[0].key\n        : ''\n    }\n  },\n\n  methods: {\n    ...mapActions(['registerUser', 'loadCategories']),\n    async submit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        try {\n          this.loading = true\n          await this.registerUser({\n            data: {\n              name: this.name,\n              email: this.email,\n              password: this.password,\n              role: this.role,\n              moderateCategory: this.moderateCategory\n            }\n          })\n          this.loading = false\n          this.$router.push({ name: 'Home' })\n        } catch (err) {\n          this.serverErrorMessage = err.data.message\n          this.loading = false\n        }\n      }\n    }\n  }\n}\n",{"version":3,"sources":["RegisterForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RegisterForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <form\n    class=\"register-form page-form\"\n    @submit.prevent=\"submit\"\n  >\n    <span class=\"error-message\">\n      {{ serverErrorMessage }}\n    </span>\n    <div class=\"field\">\n      <label class=\"label\">\n        Name\n      </label>\n      <base-input\n        v-model=\"name\"\n        :errors=\"$v.name\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">\n        Email\n      </label>\n      <base-input\n        v-model=\"email\"\n        type=\"email\"\n        :errors=\"$v.email\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">\n        Password\n      </label>\n      <base-input\n        v-model=\"password\"\n        type=\"password\"\n        :errors=\"$v.password\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">\n        Role\n      </label>\n      <base-select-input\n        v-model=\"role\"\n        :options=\"roleOptions\"\n      />\n    </div>\n    <div\n      v-if=\"role === 'moderator'\"\n      class=\"field\"\n    >\n      <label class=\"label\">\n        Moderates category\n      </label>\n      <base-select-input\n        v-model=\"moderateCategory\"\n        y-direction=\"above\"\n        :loading-options=\"loadingCategories\"\n        :options=\"categoryOptions\"\n      />\n    </div>\n    <base-button\n      :disabled=\"loading\"\n    >\n      {{ loading ? 'Signing Up...' : 'Sign Up' }}\n    </base-button>\n  </form>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { required, email } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      name: '',\n      email: '',\n      password: '',\n      role: 'user',\n      moderateCategory: '',\n      serverErrorMessage: '',\n      loading: false,\n      loadingCategories: false\n    }\n  },\n\n  validations: {\n    name: { required },\n    email: { required, email },\n    password: { required }\n  },\n\n  computed: {\n    ...mapState({\n      categories: state => state.categories.all\n    }),\n\n    roleOptions () {\n      return [\n        { key: 'user', title: 'User' },\n        { key: 'moderator', title: 'Moderator' },\n        { key: 'admin', title: 'Admin' }\n      ]\n    },\n\n    categoryOptions () {\n      return this.loadingCategories\n        ? []\n        : this.categories.map(category => ({\n          key: category.slug,\n          title: category.title\n        }))\n    }\n  },\n\n  async mounted () {\n    this.loadingCategories = true\n    await this.loadCategories()\n    this.loadingCategories = false\n    if (this.role === 'moderator') {\n      this.moderateCategory = this.categoryOptions[0].key\n    }\n  },\n\n  watch: {\n    role (role) {\n      this.moderateCategory = role === 'moderator'\n        ? this.categoryOptions[0].key\n        : ''\n    }\n  },\n\n  methods: {\n    ...mapActions(['registerUser', 'loadCategories']),\n    async submit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        try {\n          this.loading = true\n          await this.registerUser({\n            data: {\n              name: this.name,\n              email: this.email,\n              password: this.password,\n              role: this.role,\n              moderateCategory: this.moderateCategory\n            }\n          })\n          this.loading = false\n          this.$router.push({ name: 'Home' })\n        } catch (err) {\n          this.serverErrorMessage = err.data.message\n          this.loading = false\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.field\n  margin-bottom: 20px\n\n.label\n  display: block\n  margin-bottom: 3px\n\n.base-button\n  width: 100%\n\n.error-message\n  text-align: center\n  display: block\n  margin-bottom: 10px\n  color: $errorColor\n\n.categories-spinner\n  display: flex\n  justify-content: center\n  align-items: center\n  margin-bottom: 15px\n</style>\n"]}]}