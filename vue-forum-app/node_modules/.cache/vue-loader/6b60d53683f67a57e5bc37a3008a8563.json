{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/TopicForm.vue?vue&type=style&index=0&id=0a5b9513&lang=stylus&scoped=true&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/TopicForm.vue","mtime":1597000068038},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.base-spinner\n  display: flex\n  justify-content: center\n  align-items: center\n  background: #FFF\n  padding: 50px 0\n\n.field\n  margin-bottom: 20px\n\n.label\n  margin-bottom: 3px\n  display: block\n\n.submit-field\n  display: flex\n  justify-content: flex-end\n  align-items: center\n\n.error-message\n  color: $errorColor\n  text-align: left\n  flex: 1\n\n.unauthorized-error-message\n  color: $errorColor\n  text-align: center\n  padding: 30px\n  background: #FFF\n",{"version":3,"sources":["TopicForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TopicForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <base-spinner v-if=\"loading\"/>\n  <span\n    v-else-if=\"unauthorized\"\n    class=\"unauthorized-error-message\"\n  >\n    You cannot edit this topic.\n  </span>\n  <div\n    v-else\n    class=\"topic-form page-form\"\n  >\n    <div class=\"field\">\n      <label class=\"label\">Title</label>\n      <base-input\n        v-model=\"title\"\n        :errors=\"$v.title\"\n      />\n    </div>\n    <div\n      v-if=\"categoryOptions\"\n      class=\"field\"\n    >\n      <label class=\"label\">Category</label>\n      <base-select-input\n        v-model=\"category\"\n        :options=\"categoryOptions\"\n        placeholder=\"Select a category\"\n        :errors=\"$v.category\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Text</label>\n      <base-textarea\n        v-model=\"content\"\n        :errors=\"$v.content\"\n      />\n    </div>\n    <div class=\"submit-field\">\n      <span\n        v-if=\"errorMessage\"\n        class=\"error-message\"\n      >\n        {{ errorMessage }}\n      </span>\n      <base-button\n        @click=\"onSubmit\"\n      >\n        {{ update ? 'Update' : 'Create' }}\n      </base-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  props: {\n    categorySlug: {\n      type: String,\n      default: ''\n    },\n\n    topicId: {\n      type: [String, Number],\n      default: null\n    },\n\n    update: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      title: '',\n      content: '',\n      category: '',\n      loading: false,\n      errorMessage: '',\n      unauthorized: false\n    }\n  },\n\n  validations: {\n    title: { required },\n    content: { required },\n    category: { required }\n  },\n\n  computed: {\n    ...mapState({\n      categories: state => state.categories.all,\n      topic: state => state.topics.current\n    }),\n\n    categoryOptions () {\n      return this.categories.map(category => ({\n        key: category.slug,\n        title: category.title\n      }))\n    }\n  },\n\n  async mounted () {\n    this.loading = true\n    await this.loadCategories()\n    if (this.topicId) {\n      try {\n        await this.loadCurrentTopic({ topicId: this.topicId })\n        if (!this.isLoggedIn || (this.currentUser && !this.currentUser.canEditTopic(this.topic))) {\n          throw Error('unauthorized')\n        }\n        this.title = this.topic.title\n        this.content = this.topic.content\n        this.category = this.topic.category.slug\n      } catch (err) {\n        this.unauthorized = err.message === 'unauthorized'\n      }\n    }\n    if (this.categorySlug) {\n      this.category = this.categorySlug\n    }\n    this.loading = false\n  },\n\n  methods: {\n    ...mapActions([\n      'loadCategories',\n      'loadCurrentTopic',\n      'createTopic',\n      'updateTopic'\n    ]),\n\n    async onSubmit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          let topicId\n          if (this.update) {\n            topicId = await this.updateTopic({\n              topicId: this.topicId,\n              data: {\n                title: this.title,\n                content: this.content,\n                category: this.category\n              }\n            })\n          } else {\n            topicId = await this.createTopic({\n              data: {\n                title: this.title,\n                content: this.content,\n                category: this.category\n              }\n            })\n          }\n          this.loading = false\n          this.$router.push({ name: 'Topic', params: { topicId } })\n        } catch (error) {\n          this.loading = false\n          this.errorMessage = `An error occured while ${this.update ? 'updating' : 'creating'} this topic. Please try again later.`\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.base-spinner\n  display: flex\n  justify-content: center\n  align-items: center\n  background: #FFF\n  padding: 50px 0\n\n.field\n  margin-bottom: 20px\n\n.label\n  margin-bottom: 3px\n  display: block\n\n.submit-field\n  display: flex\n  justify-content: flex-end\n  align-items: center\n\n.error-message\n  color: $errorColor\n  text-align: left\n  flex: 1\n\n.unauthorized-error-message\n  color: $errorColor\n  text-align: center\n  padding: 30px\n  background: #FFF\n</style>\n"]}]}