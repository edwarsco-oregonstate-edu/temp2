{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/BaseImageCropper.vue?vue&type=style&index=0&id=1ae1d6d3&lang=stylus&scoped=true&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/BaseImageCropper.vue","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/stylus-loader/index.js","mtime":1519606876000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/style-resources-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.content\n  background: #222\n  width: 100%\n  height: 100%\n  overflow: hidden\n  position: relative\n  display: block\n  cursor: move\n  border-radius: 3px\n\n.image\n  max-width: 100%\n  display: flex\n  pointer-events: all\n\n.image-container\n  position: relative\n\n.crop-area\n  position: absolute\n  left: 50%\n  top: 50%\n  z-index: 1\n  transform: translate(-50%, -50%)\n  border: 2px solid rgba(255, 255, 255, 0.8)\n  box-shadow: 0 0 2000px 2000px rgba(0, 0, 0, 0.8)\n  pointer-events: none\n\n.save-button\n  height: 35px\n  padding: 0 20px\n  border: none\n  border-radius: 35px\n  background: #2288AA\n  color: #FFF\n  cursor: pointer\n  position: absolute\n  top: 10px\n  right: 10px\n  z-index: 2\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 16px\n  font-family: 'Helvetica'\n  outline: 0\n  transition: 0.2s background ease-out\n  font-family 'Avenir', Helvetica, Arial, sans-serif\n  -webkit-font-smoothing antialiased\n  -moz-osx-font-smoothing grayscale\n  font-weight: 500\n\n.save-button:hover\n  background: lighten(#2288AA, 10%)\n\n.loading-view\n  position: absolute\n  z-index: 1\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  background: #222\n  border-radius: 3px\n  color: #FFF\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 20px\n\n.loading-content\n  background: rgba(255, 255, 255, 0.1)\n  padding: 10px 20px\n  display: flex\n  align-items: center\n  border-radius: 24px\n",{"version":3,"sources":["BaseImageCropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"BaseImageCropper.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    class=\"base-image-cropper\"\n    @mousedown.prevent=\"onMousedown\"\n    @touchstart.prevent=\"onMousedown\"\n    @wheel.prevent=\"onWheel\"\n  >\n    <div\n      v-show=\"loading\"\n      class=\"loading-view\"\n    >\n      <div class=\"loading-content\">\n        Loading...\n      </div>\n    </div>\n    <div\n      v-show=\"!loading\"\n      class=\"content\"\n      ref=\"container\"\n    >\n      <button\n        class=\"save-button\"\n        @click=\"crop\"\n        @touchstart.stop\n      >\n        Save\n      </button>\n        <div\n          class=\"crop-area\"\n          ref=\"cropArea\"\n          :style=\"{\n            'width': `${cropWidth}px`,\n            'height': `${cropHeight}px`,\n            'transform': `translate3d(-50%, -50%, 0) scale(${cropScale})`\n          }\"\n        ></div>\n        <img\n          v-if=\"showImage\"\n          class=\"image\"\n          ref=\"image\"\n          crossorigin=\"anonymous\"\n          :src=\"src\"\n          :style=\"{\n            'transform': `translate3d(${translate.x}px, ${translate.y}px, 0) scale(${scale})`,\n            'transform-origin': `${origin.x}px ${origin.y}px`\n          }\"\n          @load=\"init\"\n        >\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n\n    cropWidth: {\n      type: Number,\n      default: 300\n    },\n\n    cropHeight: {\n      type: Number,\n      default: 300\n    }\n  },\n\n  data () {\n    return {\n      loading: true,\n      showImage: false,\n      dragging: false,\n      startX: 0,\n      startY: 0,\n      translate: { x: 0, y: 0 },\n      origin: { x: 'center', y: 'center' },\n      scale: 1,\n      maxScale: 1,\n      minScale: 1,\n      cropScale: 1,\n      startTouchDistance: 0\n    }\n  },\n\n  mounted () {\n    window.addEventListener('mousemove', this.onMousemove)\n    window.addEventListener('touchmove', this.onMousemove)\n    window.addEventListener('mouseup', this.onMouseup)\n    window.addEventListener('touchend', this.onMouseup)\n    window.addEventListener('resize', this.onResize)\n    setTimeout(() => {\n      this.showImage = true\n    }, 150)\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('mousemove', this.onMousemove)\n    window.removeEventListener('touchmove', this.onMousemove)\n    window.removeEventListener('mouseup', this.onMouseup)\n    window.removeEventListener('touchend', this.onMouseup)\n    window.removeEventListener('resize', this.onResize)\n  },\n\n  methods: {\n    init () {\n      this.loading = false\n      this.$nextTick(() => {\n        if (!this.$refs.image) {\n          return\n        }\n        const containerRect = this.getContainerRect()\n        this.updateCropScale()\n        this.maxScale = this.$refs.image.naturalWidth / this.$refs.image.width\n        this.minScale = this.cropWidth < containerRect.width && this.cropHeight < containerRect.height\n          ? Math.max(this.cropWidth / this.$refs.image.width, this.cropHeight / this.$refs.image.height)\n          : 1\n\n        this.scale = this.maxScale\n        this.translate.y = (this.getCropRect().top - this.getImageRect().top) - (this.getImageRect().height - this.getCropRect().height) / 2\n      })\n    },\n\n    getContainerRect () {\n      return this.$refs.container.getBoundingClientRect()\n    },\n\n    getImageRect () {\n      if (!this.$refs.image) {\n        return { width: this.cropWidth, height: this.cropHeight }\n      }\n      return this.$refs.image.getBoundingClientRect()\n    },\n\n    getCropRect () {\n      return this.$refs.cropArea.getBoundingClientRect()\n    },\n\n    updateCropScale () {\n      const containerRect = this.getContainerRect()\n      this.cropScale = this.cropWidth < containerRect.width && this.cropHeight < containerRect.height\n        ? 1\n        : Math.min(containerRect.width / this.cropWidth, containerRect.height / this.cropHeight)\n    },\n\n    onResize () {\n      this.init()\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    onZoom () {\n      const boundaries = this.getBoundaries()\n      if (this.translate.x >= boundaries.translate.maxX) {\n        this.translate.x = boundaries.translate.maxX\n        this.origin.x = boundaries.origin.minX\n      }\n\n      if (this.translate.x <= boundaries.translate.minX) {\n        this.translate.x = boundaries.translate.minX\n        this.origin.x = boundaries.origin.maxX\n      }\n\n      if (this.translate.y >= boundaries.translate.maxY) {\n        this.origin.y = boundaries.origin.minY\n        this.translate.y = boundaries.translate.maxY\n      }\n\n      if (this.translate.y <= boundaries.translate.minY) {\n        this.origin.y = boundaries.origin.maxY\n        this.translate.y = boundaries.translate.minY\n      }\n    },\n\n    onMousemove (e) {\n      if (e.type === 'touchmove' && e.touches.length === 2) {\n        const endTouchDistance = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        )\n        const touchesDelta = endTouchDistance - this.startTouchDistance\n        this.onPinch(touchesDelta)\n      } else if (this.dragging) {\n        this.updateOrigin()\n        const boundaries = this.getBoundaries()\n        const clientX = e.type === 'touchmove'\n          ? e.touches[0].clientX\n          : e.clientX\n        const clientY = e.type === 'touchmove'\n          ? e.touches[0].clientY\n          : e.clientY\n        let newXPosition = clientX + this.startX\n        let newYPosition = clientY + this.startY\n\n        if (newXPosition >= boundaries.translate.maxX) {\n          newXPosition = boundaries.translate.maxX\n        }\n\n        if (newXPosition <= boundaries.translate.minX) {\n          newXPosition = boundaries.translate.minX\n        }\n\n        if (newYPosition >= boundaries.translate.maxY) {\n          newYPosition = boundaries.translate.maxY\n        }\n\n        if (newYPosition <= boundaries.translate.minY) {\n          newYPosition = boundaries.translate.minY\n        }\n        this.translate.x = newXPosition\n        this.translate.y = newYPosition\n      }\n    },\n\n    onMousedown (e) {\n      this.dragging = true\n      const clientX = e.type === 'touchstart'\n        ? e.touches[0].clientX\n        : e.clientX\n      const clientY = e.type === 'touchstart'\n        ? e.touches[0].clientY\n        : e.clientY\n      this.startX = this.translate.x - clientX\n      this.startY = this.translate.y - clientY\n      if (e.type === 'touchstart' && e.touches.length === 2) {\n        this.startTouchDistance = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        )\n      }\n    },\n\n    onMouseup () {\n      this.dragging = false\n      this.updateOrigin()\n    },\n\n    onWheel (e) {\n      let delta\n      if (e.wheelDelta) {\n        delta = e.wheelDelta / 1200\n      } else if (e.deltaY) {\n        delta = e.deltaY / 1060\n      } else if (e.detail) {\n        delta = e.detail / -60\n      } else {\n        delta = 0\n      }\n      const newScale = this.scale + (delta * this.scale)\n      this.scale = newScale <= this.minScale\n        ? this.minScale\n        : newScale > this.maxScale\n          ? this.maxScale\n          : newScale\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    onPinch (delta) {\n      const newScale = this.scale + (delta / 1200 * this.scale)\n      this.scale = newScale <= this.minScale\n        ? this.minScale\n        : newScale > this.maxScale\n          ? this.maxScale\n          : newScale\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    getBoundaries () {\n      const scale = this.scale\n      const cropAreaWidth = this.getCropRect().width\n      const cropAreaHeight = this.getCropRect().height\n      const centerFromBoundaryX = this.$el.clientWidth / 2\n      const centerFromBoundaryY = this.$el.clientHeight / 2\n      const imgRect = this.getImageRect()\n      const curImgWidth = imgRect.width\n      const curImgHeight = imgRect.height\n      const halfWidth = cropAreaWidth / 2\n      const halfHeight = cropAreaHeight / 2\n\n      const maxX = ((halfWidth / scale) - centerFromBoundaryX) * -1\n      const minX = maxX - ((curImgWidth * (1 / scale)) - (cropAreaWidth * (1 / scale)))\n\n      const maxY = ((halfHeight / scale) - centerFromBoundaryY) * -1\n      const minY = maxY - ((curImgHeight * (1 / scale)) - (cropAreaHeight * (1 / scale)))\n\n      const originMinX = (1 / scale) * halfWidth\n      const originMaxX = (curImgWidth * (1 / scale)) - originMinX\n\n      const originMinY = (1 / scale) * halfHeight\n      const originMaxY = (curImgHeight * (1 / scale)) - originMinY\n\n      return {\n        translate: {\n          maxX: maxX,\n          minX: minX,\n          maxY: maxY,\n          minY: minY\n        },\n\n        origin: {\n          maxX: originMaxX,\n          minX: originMinX,\n          maxY: originMaxY,\n          minY: originMinY\n        }\n      }\n    },\n\n    crop () {\n      const canvasEl = document.createElement('canvas')\n      canvasEl.style.display = 'none'\n      this.$el.appendChild(canvasEl)\n      const ctx = canvasEl.getContext('2d')\n      canvasEl.width = this.cropWidth\n      canvasEl.height = this.cropHeight\n      const ratio = this.$refs.image.naturalWidth / this.$refs.image.width\n      ctx.drawImage(\n        this.$refs.image,\n        (this.$refs.image.naturalWidth / 2) - (this.getCropRect().width * ratio / this.scale / 2) - (this.translate.x * ratio),\n        (this.$refs.image.naturalHeight / 2) - (this.getCropRect().height * ratio / this.scale / 2) - (this.translate.y * ratio) + ((Math.round(this.getContainerRect().height) - this.$refs.image.height) * ratio / 2),\n        this.getCropRect().width * ratio / this.scale,\n        this.getCropRect().height * ratio / this.scale,\n        0, 0, this.cropWidth, this.cropHeight\n      )\n      this.$nextTick(() => {\n        const dataURL = canvasEl.toDataURL('image/png')\n        this.$emit('crop', dataURL)\n      })\n    },\n\n    updateOrigin () {\n      const cropAreaBoundingRect = this.$refs.cropArea.getBoundingClientRect()\n      const imageBoundingRect = this.$refs.image.getBoundingClientRect()\n      const previousOrigin = this.origin\n      this.origin.x = ((cropAreaBoundingRect.left - imageBoundingRect.left) + (cropAreaBoundingRect.width / 2)) / this.scale\n      this.origin.y = ((cropAreaBoundingRect.top - imageBoundingRect.top) + (cropAreaBoundingRect.height / 2)) / this.scale\n      this.translate.x -= (this.origin.x - previousOrigin.x) * (1 - this.scale)\n      this.translate.y -= (this.origin.y - previousOrigin.y) * (1 - this.scale)\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.content\n  background: #222\n  width: 100%\n  height: 100%\n  overflow: hidden\n  position: relative\n  display: block\n  cursor: move\n  border-radius: 3px\n\n.image\n  max-width: 100%\n  display: flex\n  pointer-events: all\n\n.image-container\n  position: relative\n\n.crop-area\n  position: absolute\n  left: 50%\n  top: 50%\n  z-index: 1\n  transform: translate(-50%, -50%)\n  border: 2px solid rgba(255, 255, 255, 0.8)\n  box-shadow: 0 0 2000px 2000px rgba(0, 0, 0, 0.8)\n  pointer-events: none\n\n.save-button\n  height: 35px\n  padding: 0 20px\n  border: none\n  border-radius: 35px\n  background: #2288AA\n  color: #FFF\n  cursor: pointer\n  position: absolute\n  top: 10px\n  right: 10px\n  z-index: 2\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 16px\n  font-family: 'Helvetica'\n  outline: 0\n  transition: 0.2s background ease-out\n  font-family 'Avenir', Helvetica, Arial, sans-serif\n  -webkit-font-smoothing antialiased\n  -moz-osx-font-smoothing grayscale\n  font-weight: 500\n\n.save-button:hover\n  background: lighten(#2288AA, 10%)\n\n.loading-view\n  position: absolute\n  z-index: 1\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  background: #222\n  border-radius: 3px\n  color: #FFF\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 20px\n\n.loading-content\n  background: rgba(255, 255, 255, 0.1)\n  padding: 10px 20px\n  display: flex\n  align-items: center\n  border-radius: 24px\n</style>\n"]}]}