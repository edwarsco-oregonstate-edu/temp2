{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/ReplyForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/ReplyForm.vue","mtime":1596995932381},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      content: '',\n      loading: false\n    }\n  },\n\n  validations: {\n    content: { required }\n  },\n\n  methods: {\n    ...mapActions(['addReply']),\n    async reply () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          await this.addReply({ data: { content: this.content } })\n          this.content = ''\n          this.$v.$reset()\n          this.loading = false\n        } catch (err) {\n          this.loading = false\n        }\n      }\n    },\n\n    focus () {\n      this.$refs.input.focus()\n    }\n  }\n}\n",{"version":3,"sources":["ReplyForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ReplyForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"reply-form\">\n    <base-textarea\n      v-model=\"content\"\n      ref=\"input\"\n      placeholder=\"Your reply goes here...\"\n      :min-height=\"150\"\n      :disabled=\"loading\"\n    />\n    <div class=\"replyFormButtonBar\">\n\n\n    <base-button\n      class=\"insertPictureButton\"\n      :disabled=\"loading\"\n      @click=\"reply\"\n    >\n      {{ loading ? 'Loading...' : 'Insert Picture' }}\n    </base-button>\n\n\n    <base-button\n      class=\"insertVideoButton\"\n      :disabled=\"loading\"\n      @click=\"reply\"\n    >\n      {{ loading ? 'Loading...' : 'Insert Video' }}\n    </base-button>\n\n\n    <base-button\n      class=\"reply-button\"\n      :disabled=\"loading\"\n      @click=\"reply\"\n    >\n      {{ loading ? 'Replying...' : 'Reply' }}\n    </base-button>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      content: '',\n      loading: false\n    }\n  },\n\n  validations: {\n    content: { required }\n  },\n\n  methods: {\n    ...mapActions(['addReply']),\n    async reply () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          await this.addReply({ data: { content: this.content } })\n          this.content = ''\n          this.$v.$reset()\n          this.loading = false\n        } catch (err) {\n          this.loading = false\n        }\n      }\n    },\n\n    focus () {\n      this.$refs.input.focus()\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.reply-form\n  display: flex\n  justify-content: center\n  flex-direction: column\n  margin: 30px auto\n  width: 80%\n\n.reply-button\n  margin-left: 10px\n  margin-right: 10px\n\n.insertPictureButton\n  margin-left: 10px\n  margin-right: 10px\n\n\n.insertVideoButton\n  margin-left: 10px\n  margin-right: 10px\n\n.replyFormButtonBar\n  align-self: flex-end\n  margin-top: 5px\n\n</style>\n"]}]}