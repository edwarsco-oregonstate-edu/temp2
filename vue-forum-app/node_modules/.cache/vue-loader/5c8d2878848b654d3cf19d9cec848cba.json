{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/CategoryForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/CategoryForm.vue","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  props: {\n    categorySlug: {\n      type: String,\n      default: null\n    },\n\n    update: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      title: '',\n      description: '',\n      loading: false,\n      errorMessage: ''\n    }\n  },\n\n  validations: {\n    title: { required },\n    description: { required }\n  },\n\n  computed: {\n    ...mapState({\n      category: state => state.categories.current\n    })\n  },\n\n  async mounted () {\n    this.loading = true\n    if (this.categorySlug) {\n      try {\n        await this.loadCurrentCategory({ categorySlug: this.categorySlug })\n        this.title = this.category.title\n        this.description = this.category.description\n      } catch (errr) {\n        this.$router.push({ name: 'Home' })\n      }\n    }\n    this.loading = false\n  },\n\n  methods: {\n    ...mapActions([\n      'loadCurrentCategory',\n      'createCategory',\n      'updateCategory'\n    ]),\n\n    async onSubmit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          let categorySlug\n          if (this.update) {\n            categorySlug = await this.updateCategory({\n              categorySlug: this.categorySlug,\n              data: {\n                title: this.title,\n                description: this.description\n              }\n            })\n          } else {\n            categorySlug = await this.createCategory({\n              data: {\n                title: this.title,\n                description: this.description\n              }\n            })\n          }\n          this.loading = false\n          this.$router.push({ name: 'Category', params: { categorySlug } })\n        } catch (error) {\n          this.loading = false\n          this.errorMessage = `An error occured while ${this.update ? 'updating' : 'creating'} this category. Please try again later.`\n        }\n      }\n    }\n  }\n}\n",{"version":3,"sources":["CategoryForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CategoryForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <base-spinner v-if=\"loading\"/>\n  <div\n    v-else\n    class=\"category-form page-form\"\n  >\n    <div class=\"field\">\n      <label class=\"label\">Title</label>\n      <base-input\n        v-model=\"title\"\n        :errors=\"$v.title\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">Description</label>\n      <base-input\n        v-model=\"description\"\n        :errors=\"$v.description\"\n      />\n    </div>\n    <div class=\"submit-field\">\n      <span\n        v-if=\"errorMessage\"\n        class=\"error-message\"\n      >\n        {{ errorMessage }}\n      </span>\n      <base-button\n        @click=\"onSubmit\"\n      >\n        {{ update ? 'Update' : 'Create' }}\n      </base-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  props: {\n    categorySlug: {\n      type: String,\n      default: null\n    },\n\n    update: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data () {\n    return {\n      title: '',\n      description: '',\n      loading: false,\n      errorMessage: ''\n    }\n  },\n\n  validations: {\n    title: { required },\n    description: { required }\n  },\n\n  computed: {\n    ...mapState({\n      category: state => state.categories.current\n    })\n  },\n\n  async mounted () {\n    this.loading = true\n    if (this.categorySlug) {\n      try {\n        await this.loadCurrentCategory({ categorySlug: this.categorySlug })\n        this.title = this.category.title\n        this.description = this.category.description\n      } catch (errr) {\n        this.$router.push({ name: 'Home' })\n      }\n    }\n    this.loading = false\n  },\n\n  methods: {\n    ...mapActions([\n      'loadCurrentCategory',\n      'createCategory',\n      'updateCategory'\n    ]),\n\n    async onSubmit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          let categorySlug\n          if (this.update) {\n            categorySlug = await this.updateCategory({\n              categorySlug: this.categorySlug,\n              data: {\n                title: this.title,\n                description: this.description\n              }\n            })\n          } else {\n            categorySlug = await this.createCategory({\n              data: {\n                title: this.title,\n                description: this.description\n              }\n            })\n          }\n          this.loading = false\n          this.$router.push({ name: 'Category', params: { categorySlug } })\n        } catch (error) {\n          this.loading = false\n          this.errorMessage = `An error occured while ${this.update ? 'updating' : 'creating'} this category. Please try again later.`\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.base-spinner\n  display: flex\n  justify-content: center\n  align-items: center\n  background: #FFF\n  padding: 50px 0\n\n.field\n  margin-bottom: 20px\n\n.label\n  margin-bottom: 3px\n  display: block\n\n.submit-field\n  display: flex\n  justify-content: flex-end\n  align-items: center\n\n.error-message\n  color: $errorColor\n  text-align: left\n  flex: 1\n</style>\n"]}]}