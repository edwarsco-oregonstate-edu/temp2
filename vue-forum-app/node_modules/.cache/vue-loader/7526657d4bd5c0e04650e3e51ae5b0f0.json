{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/PasswordSettingsForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/PasswordSettingsForm.vue","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      loading: false,\n      errorMessage: '',\n      success: false,\n      newPassword: '',\n      currentPassword: ''\n    }\n  },\n\n  validations: {\n    newPassword: { required },\n    currentPassword: { required }\n  },\n\n  methods: {\n    ...mapActions(['updateCurrentUserPassword']),\n    async onSubmit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          await this.updateCurrentUserPassword({\n            data: {\n              currentPassword: this.currentPassword,\n              newPassword: this.newPassword\n            }\n          })\n          this.loading = false\n          this.success = true\n          this.errorMessage = ''\n          this.$v.$reset()\n          this.currentPassword = ''\n          this.newPassword = ''\n          setTimeout(() => {\n            this.success = false\n          }, 4000)\n        } catch (err) {\n          this.errorMessage = err.data.message\n          this.loading = false\n        }\n      }\n    }\n  }\n}\n",{"version":3,"sources":["PasswordSettingsForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PasswordSettingsForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"password-settings-form page-form\">\n    <div class=\"field\">\n      <label class=\"label\">Current Password</label>\n      <base-input\n        v-model=\"currentPassword\"\n        type=\"password\"\n        :errors=\"$v.currentPassword\"\n      />\n    </div>\n    <div class=\"field\">\n      <label class=\"label\">New Password</label>\n      <base-input\n        v-model=\"newPassword\"\n        type=\"password\"\n        :errors=\"$v.newPassword\"\n      />\n    </div>\n    <div class=\"submit-field\">\n      <span\n        v-if=\"errorMessage\"\n        class=\"error-message\"\n      >\n        {{ errorMessage }}\n      </span>\n      <span\n        v-if=\"success\"\n        class=\"success-message\"\n      >\n        <i class=\"fas fa-check\"></i> Saved\n      </span>\n      <base-button\n        :disabled=\"loading\"\n        @click=\"onSubmit\"\n      >\n        {{ loading ? 'Saving...' : 'Save' }}\n      </base-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { required } from 'vuelidate/lib/validators'\n\nexport default {\n  data () {\n    return {\n      loading: false,\n      errorMessage: '',\n      success: false,\n      newPassword: '',\n      currentPassword: ''\n    }\n  },\n\n  validations: {\n    newPassword: { required },\n    currentPassword: { required }\n  },\n\n  methods: {\n    ...mapActions(['updateCurrentUserPassword']),\n    async onSubmit () {\n      this.$v.$touch()\n      if (!this.$v.$anyError) {\n        this.loading = true\n        try {\n          await this.updateCurrentUserPassword({\n            data: {\n              currentPassword: this.currentPassword,\n              newPassword: this.newPassword\n            }\n          })\n          this.loading = false\n          this.success = true\n          this.errorMessage = ''\n          this.$v.$reset()\n          this.currentPassword = ''\n          this.newPassword = ''\n          setTimeout(() => {\n            this.success = false\n          }, 4000)\n        } catch (err) {\n          this.errorMessage = err.data.message\n          this.loading = false\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.field\n  margin-bottom: 20px\n\n.label\n  margin-bottom: 3px\n  display: block\n\n.submit-field\n  display: flex\n  justify-content: flex-end\n  align-items: center\n\n.error-message\n  color: $errorColor\n  text-align: left\n  flex: 1\n\n.success-message\n  color: $successColor\n  text-align: left\n  flex: 1\n</style>\n"]}]}