{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js!/home/scott/forumApp/vue-forum-app/node_modules/eslint-loader/index.js??ref--13-0!/home/scott/forumApp/vue-forum-app/src/store/modules/categories.js","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/store/modules/categories.js","mtime":1596398635585},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/scott/forumApp/vue-forum-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport apiClient from 'api-client';\nexport default {\n  state: {\n    all: [],\n    current: {}\n  },\n  actions: {\n    loadCategories: function () {\n      var _loadCategories = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, categories;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit;\n                _context.next = 3;\n                return apiClient.getCategories();\n\n              case 3:\n                categories = _context.sent;\n                commit('SET_CATEGORIES', {\n                  categories: categories\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadCategories(_x) {\n        return _loadCategories.apply(this, arguments);\n      }\n\n      return loadCategories;\n    }(),\n    loadCurrentCategory: function () {\n      var _loadCurrentCategory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref2, _ref3) {\n        var commit, categorySlug, category;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref2.commit;\n                categorySlug = _ref3.categorySlug;\n                _context2.next = 4;\n                return apiClient.getCategory(categorySlug);\n\n              case 4:\n                category = _context2.sent;\n                commit('SET_CURRENT_CATEGORY', {\n                  category: category\n                });\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadCurrentCategory(_x2, _x3) {\n        return _loadCurrentCategory.apply(this, arguments);\n      }\n\n      return loadCurrentCategory;\n    }(),\n    createCategory: function () {\n      var _createCategory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(_ref4, _ref5) {\n        var commit, data, categorySlug;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                commit = _ref4.commit;\n                data = _ref5.data;\n                _context3.next = 4;\n                return apiClient.createCategory(data);\n\n              case 4:\n                categorySlug = _context3.sent.slug;\n                return _context3.abrupt(\"return\", categorySlug);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function createCategory(_x4, _x5) {\n        return _createCategory.apply(this, arguments);\n      }\n\n      return createCategory;\n    }(),\n    updateCategory: function () {\n      var _updateCategory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(_ref6, _ref7) {\n        var commit, categorySlug, data;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                commit = _ref6.commit;\n                categorySlug = _ref7.categorySlug, data = _ref7.data;\n                _context4.next = 4;\n                return apiClient.updateCategory(categorySlug, data);\n\n              case 4:\n                return _context4.abrupt(\"return\", categorySlug);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function updateCategory(_x6, _x7) {\n        return _updateCategory.apply(this, arguments);\n      }\n\n      return updateCategory;\n    }(),\n    deleteCategory: function () {\n      var _deleteCategory = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(_ref8, _ref9) {\n        var commit, categorySlug;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                commit = _ref8.commit;\n                categorySlug = _ref9.categorySlug;\n                _context5.next = 4;\n                return apiClient.deleteCategory(categorySlug);\n\n              case 4:\n                commit('DELETE_CATEGORY', {\n                  categorySlug: categorySlug\n                });\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function deleteCategory(_x8, _x9) {\n        return _deleteCategory.apply(this, arguments);\n      }\n\n      return deleteCategory;\n    }()\n  },\n  mutations: {\n    SET_CATEGORIES: function SET_CATEGORIES(state, _ref10) {\n      var categories = _ref10.categories;\n      state.all = categories;\n    },\n    SET_CURRENT_CATEGORY: function SET_CURRENT_CATEGORY(state, _ref11) {\n      var category = _ref11.category;\n      state.current = category;\n    },\n    DELETE_CATEGORY: function DELETE_CATEGORY(state, _ref12) {\n      var categorySlug = _ref12.categorySlug;\n      state.all = state.all.filter(function (category) {\n        return category.slug !== categorySlug;\n      });\n    }\n  }\n};",{"version":3,"sources":["/home/scott/forumApp/vue-forum-app/src/store/modules/categories.js"],"names":["apiClient","state","all","current","actions","loadCategories","commit","getCategories","categories","loadCurrentCategory","categorySlug","getCategory","category","createCategory","data","slug","updateCategory","deleteCategory","mutations","SET_CATEGORIES","SET_CURRENT_CATEGORY","DELETE_CATEGORY","filter"],"mappings":"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","sourcesContent":["import apiClient from 'api-client'\n\nexport default {\n  state: {\n    all: [],\n    current: {}\n  },\n\n  actions: {\n    async loadCategories ({ commit }) {\n      const categories = await apiClient.getCategories()\n      commit('SET_CATEGORIES', { categories })\n    },\n\n    async loadCurrentCategory ({ commit }, { categorySlug }) {\n      const category = await apiClient.getCategory(categorySlug)\n      commit('SET_CURRENT_CATEGORY', { category })\n    },\n\n    async createCategory ({ commit }, { data }) {\n      const categorySlug = (await apiClient.createCategory(data)).slug\n      return categorySlug\n    },\n\n    async updateCategory ({ commit }, { categorySlug, data }) {\n      await apiClient.updateCategory(categorySlug, data)\n      return categorySlug\n    },\n\n    async deleteCategory ({ commit }, { categorySlug }) {\n      await apiClient.deleteCategory(categorySlug)\n      commit('DELETE_CATEGORY', { categorySlug })\n    }\n  },\n\n  mutations: {\n    SET_CATEGORIES (state, { categories }) {\n      state.all = categories\n    },\n\n    SET_CURRENT_CATEGORY (state, { category }) {\n      state.current = category\n    },\n\n    DELETE_CATEGORY (state, { categorySlug }) {\n      state.all = state.all.filter(\n        category => category.slug !== categorySlug\n      )\n    }\n  }\n}\n"]}]}