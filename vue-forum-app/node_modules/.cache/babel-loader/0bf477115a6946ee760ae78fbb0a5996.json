{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js!/home/scott/forumApp/vue-forum-app/node_modules/eslint-loader/index.js??ref--13-0!/home/scott/forumApp/vue-forum-app/src/api/mock/index.js","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/api/mock/index.js","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/home/scott/forumApp/vue-forum-app/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.array.find\";\nimport _Promise from \"/home/scott/forumApp/vue-forum-app/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nimport categories from './data/categories';\nimport topicsInCategory from './data/topicsInCategory';\nimport topic from './data/topic';\nimport userData from './data/userData';\n\nvar fetch = function fetch(mockData) {\n  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  return new _Promise(function (resolve) {\n    setTimeout(function () {\n      resolve(mockData);\n    }, time);\n  });\n};\n\nexport default {\n  getCategories: function getCategories() {\n    return fetch(categories);\n  },\n  getCategory: function getCategory(categorySlug) {\n    var category = categories.find(function (category) {\n      return category.slug === categorySlug;\n    });\n\n    if (!category) {\n      throw Error('Category not found');\n    }\n\n    return fetch(category);\n  },\n  createCategory: function createCategory(data) {\n    return fetch({\n      slug: 'mocked-category'\n    });\n  },\n  updateCategory: function updateCategory(categorySlug, data) {\n    return fetch(categorySlug);\n  },\n  deleteCategory: function deleteCategory(categorySlug) {\n    return fetch(true);\n  },\n  getTopics: function getTopics(filters) {\n    if (filters.categorySlug) {\n      return fetch(topicsInCategory(filters.categorySlug));\n    }\n  },\n  getTopic: function getTopic(topicId) {\n    var fetchedTopic = topic(topicId);\n\n    if (!fetchedTopic) {\n      throw Error('Topic not found');\n    }\n\n    return fetch(fetchedTopic);\n  },\n  createTopic: function createTopic(data) {\n    return fetch({\n      _id: 1\n    });\n  },\n  updateTopic: function updateTopic(topicId, data) {\n    return fetch(topicId);\n  },\n  deleteTopic: function deleteTopic(topicId) {\n    return fetch(true);\n  },\n  addReply: function addReply(topicId, data) {\n    var user = JSON.parse(localStorage.getItem('mocked_user'));\n    return fetch({\n      _id: Math.round(Math.random() * 99999),\n      content: data.content,\n      createdAt: new Date(),\n      user: user\n    });\n  },\n  deleteReply: function deleteReply(topicId, replyId) {\n    return fetch(true);\n  },\n  updateReply: function updateReply(topicId, replyId, data) {\n    return fetch(data);\n  },\n  registerUser: function registerUser(data) {},\n  login: function login(_ref) {\n    var email = _ref.email,\n        password = _ref.password;\n    var user = userData(email);\n    localStorage.setItem('mocked_user', _JSON$stringify(user));\n    return fetch({\n      user: user,\n      token: 'mockedtoken'\n    });\n  },\n  getUserData: function getUserData() {\n    return fetch(JSON.parse(localStorage.getItem('mocked_user')));\n  },\n  updateUserProfile: function updateUserProfile(_ref2) {\n    var data = _ref2.data;\n  },\n  updateUserPassword: function updateUserPassword(_ref3) {\n    var data = _ref3.data;\n  }\n};",{"version":3,"sources":["/home/scott/forumApp/vue-forum-app/src/api/mock/index.js"],"names":["categories","topicsInCategory","topic","userData","fetch","mockData","time","resolve","setTimeout","getCategories","getCategory","categorySlug","category","find","slug","Error","createCategory","data","updateCategory","deleteCategory","getTopics","filters","getTopic","topicId","fetchedTopic","createTopic","_id","updateTopic","deleteTopic","addReply","user","JSON","parse","localStorage","getItem","Math","round","random","content","createdAt","Date","deleteReply","replyId","updateReply","registerUser","login","email","password","setItem","token","getUserData","updateUserProfile","updateUserPassword"],"mappings":";;;;;;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,QAAD,EAA0B;AAAA,MAAfC,IAAe,uEAAR,GAAQ;AACtC,SAAO,aAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,UAAU,CAAC,YAAM;AACfD,MAAAA,OAAO,CAACF,QAAD,CAAP;AACD,KAFS,EAEPC,IAFO,CAAV;AAGD,GAJM,CAAP;AAKD,CAND;;AAQA,eAAe;AACbG,EAAAA,aADa,2BACI;AACf,WAAOL,KAAK,CAACJ,UAAD,CAAZ;AACD,GAHY;AAKbU,EAAAA,WALa,uBAKAC,YALA,EAKc;AACzB,QAAMC,QAAQ,GAAGZ,UAAU,CAACa,IAAX,CAAgB,UAAAD,QAAQ;AAAA,aAAIA,QAAQ,CAACE,IAAT,KAAkBH,YAAtB;AAAA,KAAxB,CAAjB;;AACA,QAAI,CAACC,QAAL,EAAe;AACb,YAAMG,KAAK,CAAC,oBAAD,CAAX;AACD;;AACD,WAAOX,KAAK,CAACQ,QAAD,CAAZ;AACD,GAXY;AAabI,EAAAA,cAba,0BAaGC,IAbH,EAaS;AACpB,WAAOb,KAAK,CAAC;AAAEU,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACD,GAfY;AAiBbI,EAAAA,cAjBa,0BAiBGP,YAjBH,EAiBiBM,IAjBjB,EAiBuB;AAClC,WAAOb,KAAK,CAACO,YAAD,CAAZ;AACD,GAnBY;AAqBbQ,EAAAA,cArBa,0BAqBGR,YArBH,EAqBiB;AAC5B,WAAOP,KAAK,CAAC,IAAD,CAAZ;AACD,GAvBY;AAyBbgB,EAAAA,SAzBa,qBAyBFC,OAzBE,EAyBO;AAClB,QAAIA,OAAO,CAACV,YAAZ,EAA0B;AACxB,aAAOP,KAAK,CAACH,gBAAgB,CAACoB,OAAO,CAACV,YAAT,CAAjB,CAAZ;AACD;AACF,GA7BY;AA+BbW,EAAAA,QA/Ba,oBA+BHC,OA/BG,EA+BM;AACjB,QAAMC,YAAY,GAAGtB,KAAK,CAACqB,OAAD,CAA1B;;AACA,QAAI,CAACC,YAAL,EAAmB;AACjB,YAAMT,KAAK,CAAC,iBAAD,CAAX;AACD;;AACD,WAAOX,KAAK,CAACoB,YAAD,CAAZ;AACD,GArCY;AAuCbC,EAAAA,WAvCa,uBAuCAR,IAvCA,EAuCM;AACjB,WAAOb,KAAK,CAAC;AAAEsB,MAAAA,GAAG,EAAE;AAAP,KAAD,CAAZ;AACD,GAzCY;AA2CbC,EAAAA,WA3Ca,uBA2CAJ,OA3CA,EA2CSN,IA3CT,EA2Ce;AAC1B,WAAOb,KAAK,CAACmB,OAAD,CAAZ;AACD,GA7CY;AA+CbK,EAAAA,WA/Ca,uBA+CAL,OA/CA,EA+CS;AACpB,WAAOnB,KAAK,CAAC,IAAD,CAAZ;AACD,GAjDY;AAmDbyB,EAAAA,QAnDa,oBAmDHN,OAnDG,EAmDMN,IAnDN,EAmDY;AACvB,QAAMa,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAb;AACA,WAAO9B,KAAK,CAAC;AACXsB,MAAAA,GAAG,EAAES,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAA3B,CADM;AAEXC,MAAAA,OAAO,EAAErB,IAAI,CAACqB,OAFH;AAGXC,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHA;AAIXV,MAAAA,IAAI,EAAJA;AAJW,KAAD,CAAZ;AAMD,GA3DY;AA6DbW,EAAAA,WA7Da,uBA6DAlB,OA7DA,EA6DSmB,OA7DT,EA6DkB;AAC7B,WAAOtC,KAAK,CAAC,IAAD,CAAZ;AACD,GA/DY;AAiEbuC,EAAAA,WAjEa,uBAiEApB,OAjEA,EAiESmB,OAjET,EAiEkBzB,IAjElB,EAiEwB;AACnC,WAAOb,KAAK,CAACa,IAAD,CAAZ;AACD,GAnEY;AAqEb2B,EAAAA,YArEa,wBAqEC3B,IArED,EAqEO,CAAE,CArET;AAuEb4B,EAAAA,KAvEa,uBAuEe;AAAA,QAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,QAAZC,QAAY,QAAZA,QAAY;AAC1B,QAAMjB,IAAI,GAAG3B,QAAQ,CAAC2C,KAAD,CAArB;AACAb,IAAAA,YAAY,CAACe,OAAb,CAAqB,aAArB,EAAoC,gBAAelB,IAAf,CAApC;AACA,WAAO1B,KAAK,CAAC;AACX0B,MAAAA,IAAI,EAAJA,IADW;AAEXmB,MAAAA,KAAK,EAAE;AAFI,KAAD,CAAZ;AAID,GA9EY;AAgFbC,EAAAA,WAhFa,yBAgFE;AACb,WAAO9C,KAAK,CAAC2B,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAD,CAAZ;AACD,GAlFY;AAoFbiB,EAAAA,iBApFa,oCAoFgB;AAAA,QAARlC,IAAQ,SAARA,IAAQ;AAAE,GApFlB;AAsFbmC,EAAAA,kBAtFa,qCAsFiB;AAAA,QAARnC,IAAQ,SAARA,IAAQ;AAAE;AAtFnB,CAAf","sourcesContent":["import categories from './data/categories'\nimport topicsInCategory from './data/topicsInCategory'\nimport topic from './data/topic'\nimport userData from './data/userData'\n\nconst fetch = (mockData, time = 100) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(mockData)\n    }, time)\n  })\n}\n\nexport default {\n  getCategories () {\n    return fetch(categories)\n  },\n\n  getCategory (categorySlug) {\n    const category = categories.find(category => category.slug === categorySlug)\n    if (!category) {\n      throw Error('Category not found')\n    }\n    return fetch(category)\n  },\n\n  createCategory (data) {\n    return fetch({ slug: 'mocked-category' })\n  },\n\n  updateCategory (categorySlug, data) {\n    return fetch(categorySlug)\n  },\n\n  deleteCategory (categorySlug) {\n    return fetch(true)\n  },\n\n  getTopics (filters) {\n    if (filters.categorySlug) {\n      return fetch(topicsInCategory(filters.categorySlug))\n    }\n  },\n\n  getTopic (topicId) {\n    const fetchedTopic = topic(topicId)\n    if (!fetchedTopic) {\n      throw Error('Topic not found')\n    }\n    return fetch(fetchedTopic)\n  },\n\n  createTopic (data) {\n    return fetch({ _id: 1 })\n  },\n\n  updateTopic (topicId, data) {\n    return fetch(topicId)\n  },\n\n  deleteTopic (topicId) {\n    return fetch(true)\n  },\n\n  addReply (topicId, data) {\n    const user = JSON.parse(localStorage.getItem('mocked_user'))\n    return fetch({\n      _id: Math.round(Math.random() * 99999),\n      content: data.content,\n      createdAt: new Date(),\n      user\n    })\n  },\n\n  deleteReply (topicId, replyId) {\n    return fetch(true)\n  },\n\n  updateReply (topicId, replyId, data) {\n    return fetch(data)\n  },\n\n  registerUser (data) {},\n\n  login ({ email, password }) {\n    const user = userData(email)\n    localStorage.setItem('mocked_user', JSON.stringify(user))\n    return fetch({\n      user,\n      token: 'mockedtoken'\n    })\n  },\n\n  getUserData () {\n    return fetch(JSON.parse(localStorage.getItem('mocked_user')))\n  },\n\n  updateUserProfile ({ data }) {},\n\n  updateUserPassword ({ data }) {}\n}\n"]}]}