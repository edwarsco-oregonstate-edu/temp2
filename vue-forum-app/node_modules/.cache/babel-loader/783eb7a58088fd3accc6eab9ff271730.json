{"remainingRequest":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js!/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/scott/forumApp/vue-forum-app/src/components/BaseImageCropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/scott/forumApp/vue-forum-app/src/components/BaseImageCropper.vue","mtime":1596398635581},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/scott/forumApp/vue-forum-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.math.hypot\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n    cropWidth: {\n      type: Number,\n      default: 300\n    },\n    cropHeight: {\n      type: Number,\n      default: 300\n    }\n  },\n  data: function data() {\n    return {\n      loading: true,\n      showImage: false,\n      dragging: false,\n      startX: 0,\n      startY: 0,\n      translate: {\n        x: 0,\n        y: 0\n      },\n      origin: {\n        x: 'center',\n        y: 'center'\n      },\n      scale: 1,\n      maxScale: 1,\n      minScale: 1,\n      cropScale: 1,\n      startTouchDistance: 0\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    window.addEventListener('mousemove', this.onMousemove);\n    window.addEventListener('touchmove', this.onMousemove);\n    window.addEventListener('mouseup', this.onMouseup);\n    window.addEventListener('touchend', this.onMouseup);\n    window.addEventListener('resize', this.onResize);\n    setTimeout(function () {\n      _this.showImage = true;\n    }, 150);\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('mousemove', this.onMousemove);\n    window.removeEventListener('touchmove', this.onMousemove);\n    window.removeEventListener('mouseup', this.onMouseup);\n    window.removeEventListener('touchend', this.onMouseup);\n    window.removeEventListener('resize', this.onResize);\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      this.loading = false;\n      this.$nextTick(function () {\n        if (!_this2.$refs.image) {\n          return;\n        }\n\n        var containerRect = _this2.getContainerRect();\n\n        _this2.updateCropScale();\n\n        _this2.maxScale = _this2.$refs.image.naturalWidth / _this2.$refs.image.width;\n        _this2.minScale = _this2.cropWidth < containerRect.width && _this2.cropHeight < containerRect.height ? Math.max(_this2.cropWidth / _this2.$refs.image.width, _this2.cropHeight / _this2.$refs.image.height) : 1;\n        _this2.scale = _this2.maxScale;\n        _this2.translate.y = _this2.getCropRect().top - _this2.getImageRect().top - (_this2.getImageRect().height - _this2.getCropRect().height) / 2;\n      });\n    },\n    getContainerRect: function getContainerRect() {\n      return this.$refs.container.getBoundingClientRect();\n    },\n    getImageRect: function getImageRect() {\n      if (!this.$refs.image) {\n        return {\n          width: this.cropWidth,\n          height: this.cropHeight\n        };\n      }\n\n      return this.$refs.image.getBoundingClientRect();\n    },\n    getCropRect: function getCropRect() {\n      return this.$refs.cropArea.getBoundingClientRect();\n    },\n    updateCropScale: function updateCropScale() {\n      var containerRect = this.getContainerRect();\n      this.cropScale = this.cropWidth < containerRect.width && this.cropHeight < containerRect.height ? 1 : Math.min(containerRect.width / this.cropWidth, containerRect.height / this.cropHeight);\n    },\n    onResize: function onResize() {\n      var _this3 = this;\n\n      this.init();\n      this.$nextTick(function () {\n        _this3.onZoom();\n      });\n    },\n    onZoom: function onZoom() {\n      var boundaries = this.getBoundaries();\n\n      if (this.translate.x >= boundaries.translate.maxX) {\n        this.translate.x = boundaries.translate.maxX;\n        this.origin.x = boundaries.origin.minX;\n      }\n\n      if (this.translate.x <= boundaries.translate.minX) {\n        this.translate.x = boundaries.translate.minX;\n        this.origin.x = boundaries.origin.maxX;\n      }\n\n      if (this.translate.y >= boundaries.translate.maxY) {\n        this.origin.y = boundaries.origin.minY;\n        this.translate.y = boundaries.translate.maxY;\n      }\n\n      if (this.translate.y <= boundaries.translate.minY) {\n        this.origin.y = boundaries.origin.maxY;\n        this.translate.y = boundaries.translate.minY;\n      }\n    },\n    onMousemove: function onMousemove(e) {\n      if (e.type === 'touchmove' && e.touches.length === 2) {\n        var endTouchDistance = Math.hypot(e.touches[0].pageX - e.touches[1].pageX, e.touches[0].pageY - e.touches[1].pageY);\n        var touchesDelta = endTouchDistance - this.startTouchDistance;\n        this.onPinch(touchesDelta);\n      } else if (this.dragging) {\n        this.updateOrigin();\n        var boundaries = this.getBoundaries();\n        var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\n        var clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;\n        var newXPosition = clientX + this.startX;\n        var newYPosition = clientY + this.startY;\n\n        if (newXPosition >= boundaries.translate.maxX) {\n          newXPosition = boundaries.translate.maxX;\n        }\n\n        if (newXPosition <= boundaries.translate.minX) {\n          newXPosition = boundaries.translate.minX;\n        }\n\n        if (newYPosition >= boundaries.translate.maxY) {\n          newYPosition = boundaries.translate.maxY;\n        }\n\n        if (newYPosition <= boundaries.translate.minY) {\n          newYPosition = boundaries.translate.minY;\n        }\n\n        this.translate.x = newXPosition;\n        this.translate.y = newYPosition;\n      }\n    },\n    onMousedown: function onMousedown(e) {\n      this.dragging = true;\n      var clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;\n      var clientY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;\n      this.startX = this.translate.x - clientX;\n      this.startY = this.translate.y - clientY;\n\n      if (e.type === 'touchstart' && e.touches.length === 2) {\n        this.startTouchDistance = Math.hypot(e.touches[0].pageX - e.touches[1].pageX, e.touches[0].pageY - e.touches[1].pageY);\n      }\n    },\n    onMouseup: function onMouseup() {\n      this.dragging = false;\n      this.updateOrigin();\n    },\n    onWheel: function onWheel(e) {\n      var _this4 = this;\n\n      var delta;\n\n      if (e.wheelDelta) {\n        delta = e.wheelDelta / 1200;\n      } else if (e.deltaY) {\n        delta = e.deltaY / 1060;\n      } else if (e.detail) {\n        delta = e.detail / -60;\n      } else {\n        delta = 0;\n      }\n\n      var newScale = this.scale + delta * this.scale;\n      this.scale = newScale <= this.minScale ? this.minScale : newScale > this.maxScale ? this.maxScale : newScale;\n      this.$nextTick(function () {\n        _this4.onZoom();\n      });\n    },\n    onPinch: function onPinch(delta) {\n      var _this5 = this;\n\n      var newScale = this.scale + delta / 1200 * this.scale;\n      this.scale = newScale <= this.minScale ? this.minScale : newScale > this.maxScale ? this.maxScale : newScale;\n      this.$nextTick(function () {\n        _this5.onZoom();\n      });\n    },\n    getBoundaries: function getBoundaries() {\n      var scale = this.scale;\n      var cropAreaWidth = this.getCropRect().width;\n      var cropAreaHeight = this.getCropRect().height;\n      var centerFromBoundaryX = this.$el.clientWidth / 2;\n      var centerFromBoundaryY = this.$el.clientHeight / 2;\n      var imgRect = this.getImageRect();\n      var curImgWidth = imgRect.width;\n      var curImgHeight = imgRect.height;\n      var halfWidth = cropAreaWidth / 2;\n      var halfHeight = cropAreaHeight / 2;\n      var maxX = (halfWidth / scale - centerFromBoundaryX) * -1;\n      var minX = maxX - (curImgWidth * (1 / scale) - cropAreaWidth * (1 / scale));\n      var maxY = (halfHeight / scale - centerFromBoundaryY) * -1;\n      var minY = maxY - (curImgHeight * (1 / scale) - cropAreaHeight * (1 / scale));\n      var originMinX = 1 / scale * halfWidth;\n      var originMaxX = curImgWidth * (1 / scale) - originMinX;\n      var originMinY = 1 / scale * halfHeight;\n      var originMaxY = curImgHeight * (1 / scale) - originMinY;\n      return {\n        translate: {\n          maxX: maxX,\n          minX: minX,\n          maxY: maxY,\n          minY: minY\n        },\n        origin: {\n          maxX: originMaxX,\n          minX: originMinX,\n          maxY: originMaxY,\n          minY: originMinY\n        }\n      };\n    },\n    crop: function crop() {\n      var _this6 = this;\n\n      var canvasEl = document.createElement('canvas');\n      canvasEl.style.display = 'none';\n      this.$el.appendChild(canvasEl);\n      var ctx = canvasEl.getContext('2d');\n      canvasEl.width = this.cropWidth;\n      canvasEl.height = this.cropHeight;\n      var ratio = this.$refs.image.naturalWidth / this.$refs.image.width;\n      ctx.drawImage(this.$refs.image, this.$refs.image.naturalWidth / 2 - this.getCropRect().width * ratio / this.scale / 2 - this.translate.x * ratio, this.$refs.image.naturalHeight / 2 - this.getCropRect().height * ratio / this.scale / 2 - this.translate.y * ratio + (Math.round(this.getContainerRect().height) - this.$refs.image.height) * ratio / 2, this.getCropRect().width * ratio / this.scale, this.getCropRect().height * ratio / this.scale, 0, 0, this.cropWidth, this.cropHeight);\n      this.$nextTick(function () {\n        var dataURL = canvasEl.toDataURL('image/png');\n\n        _this6.$emit('crop', dataURL);\n      });\n    },\n    updateOrigin: function updateOrigin() {\n      var cropAreaBoundingRect = this.$refs.cropArea.getBoundingClientRect();\n      var imageBoundingRect = this.$refs.image.getBoundingClientRect();\n      var previousOrigin = this.origin;\n      this.origin.x = (cropAreaBoundingRect.left - imageBoundingRect.left + cropAreaBoundingRect.width / 2) / this.scale;\n      this.origin.y = (cropAreaBoundingRect.top - imageBoundingRect.top + cropAreaBoundingRect.height / 2) / this.scale;\n      this.translate.x -= (this.origin.x - previousOrigin.x) * (1 - this.scale);\n      this.translate.y -= (this.origin.y - previousOrigin.y) * (1 - this.scale);\n    }\n  }\n};",{"version":3,"sources":["BaseImageCropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAMA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KANA;AAWA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAXA,GADA;AAkBA,EAAA,IAlBA,kBAkBA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,IADA;AAEA,MAAA,SAAA,EAAA,KAFA;AAGA,MAAA,QAAA,EAAA,KAHA;AAIA,MAAA,MAAA,EAAA,CAJA;AAKA,MAAA,MAAA,EAAA,CALA;AAMA,MAAA,SAAA,EAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OANA;AAOA,MAAA,MAAA,EAAA;AAAA,QAAA,CAAA,EAAA,QAAA;AAAA,QAAA,CAAA,EAAA;AAAA,OAPA;AAQA,MAAA,KAAA,EAAA,CARA;AASA,MAAA,QAAA,EAAA,CATA;AAUA,MAAA,QAAA,EAAA,CAVA;AAWA,MAAA,SAAA,EAAA,CAXA;AAYA,MAAA,kBAAA,EAAA;AAZA,KAAA;AAcA,GAjCA;AAmCA,EAAA,OAnCA,qBAmCA;AAAA;;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,KAAA,SAAA;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,UAAA,EAAA,KAAA,SAAA;AACA,IAAA,MAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,QAAA;AACA,IAAA,UAAA,CAAA,YAAA;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA,KAFA,EAEA,GAFA,CAAA;AAGA,GA5CA;AA8CA,EAAA,aA9CA,2BA8CA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,WAAA,EAAA,KAAA,WAAA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,KAAA,SAAA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,UAAA,EAAA,KAAA,SAAA;AACA,IAAA,MAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,KAAA,QAAA;AACA,GApDA;AAsDA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AAAA;;AACA,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,YAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA;AACA;AACA;;AACA,YAAA,aAAA,GAAA,MAAA,CAAA,gBAAA,EAAA;;AACA,QAAA,MAAA,CAAA,eAAA;;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,YAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,QAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,SAAA,GAAA,aAAA,CAAA,KAAA,IAAA,MAAA,CAAA,UAAA,GAAA,aAAA,CAAA,MAAA,GACA,IAAA,CAAA,GAAA,CAAA,MAAA,CAAA,SAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,EAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CADA,GAEA,CAFA;AAIA,QAAA,MAAA,CAAA,KAAA,GAAA,MAAA,CAAA,QAAA;AACA,QAAA,MAAA,CAAA,SAAA,CAAA,CAAA,GAAA,MAAA,CAAA,WAAA,GAAA,GAAA,GAAA,MAAA,CAAA,YAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,YAAA,GAAA,MAAA,GAAA,MAAA,CAAA,WAAA,GAAA,MAAA,IAAA,CAAA;AACA,OAbA;AAcA,KAjBA;AAmBA,IAAA,gBAnBA,8BAmBA;AACA,aAAA,KAAA,KAAA,CAAA,SAAA,CAAA,qBAAA,EAAA;AACA,KArBA;AAuBA,IAAA,YAvBA,0BAuBA;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,KAAA,EAAA;AACA,eAAA;AAAA,UAAA,KAAA,EAAA,KAAA,SAAA;AAAA,UAAA,MAAA,EAAA,KAAA;AAAA,SAAA;AACA;;AACA,aAAA,KAAA,KAAA,CAAA,KAAA,CAAA,qBAAA,EAAA;AACA,KA5BA;AA8BA,IAAA,WA9BA,yBA8BA;AACA,aAAA,KAAA,KAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;AACA,KAhCA;AAkCA,IAAA,eAlCA,6BAkCA;AACA,UAAA,aAAA,GAAA,KAAA,gBAAA,EAAA;AACA,WAAA,SAAA,GAAA,KAAA,SAAA,GAAA,aAAA,CAAA,KAAA,IAAA,KAAA,UAAA,GAAA,aAAA,CAAA,MAAA,GACA,CADA,GAEA,IAAA,CAAA,GAAA,CAAA,aAAA,CAAA,KAAA,GAAA,KAAA,SAAA,EAAA,aAAA,CAAA,MAAA,GAAA,KAAA,UAAA,CAFA;AAGA,KAvCA;AAyCA,IAAA,QAzCA,sBAyCA;AAAA;;AACA,WAAA,IAAA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,MAAA;AACA,OAFA;AAGA,KA9CA;AAgDA,IAAA,MAhDA,oBAgDA;AACA,UAAA,UAAA,GAAA,KAAA,aAAA,EAAA;;AACA,UAAA,KAAA,SAAA,CAAA,CAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA,aAAA,MAAA,CAAA,CAAA,GAAA,UAAA,CAAA,MAAA,CAAA,IAAA;AACA;;AAEA,UAAA,KAAA,SAAA,CAAA,CAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA,aAAA,MAAA,CAAA,CAAA,GAAA,UAAA,CAAA,MAAA,CAAA,IAAA;AACA;;AAEA,UAAA,KAAA,SAAA,CAAA,CAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,CAAA,GAAA,UAAA,CAAA,MAAA,CAAA,IAAA;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AAEA,UAAA,KAAA,SAAA,CAAA,CAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,CAAA,GAAA,UAAA,CAAA,MAAA,CAAA,IAAA;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;AACA,KArEA;AAuEA,IAAA,WAvEA,uBAuEA,CAvEA,EAuEA;AACA,UAAA,CAAA,CAAA,IAAA,KAAA,WAAA,IAAA,CAAA,CAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,YAAA,gBAAA,GAAA,IAAA,CAAA,KAAA,CACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KADA,EAEA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAFA,CAAA;AAIA,YAAA,YAAA,GAAA,gBAAA,GAAA,KAAA,kBAAA;AACA,aAAA,OAAA,CAAA,YAAA;AACA,OAPA,MAOA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,YAAA;AACA,YAAA,UAAA,GAAA,KAAA,aAAA,EAAA;AACA,YAAA,OAAA,GAAA,CAAA,CAAA,IAAA,KAAA,WAAA,GACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OADA,GAEA,CAAA,CAAA,OAFA;AAGA,YAAA,OAAA,GAAA,CAAA,CAAA,IAAA,KAAA,WAAA,GACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OADA,GAEA,CAAA,CAAA,OAFA;AAGA,YAAA,YAAA,GAAA,OAAA,GAAA,KAAA,MAAA;AACA,YAAA,YAAA,GAAA,OAAA,GAAA,KAAA,MAAA;;AAEA,YAAA,YAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,UAAA,YAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AAEA,YAAA,YAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,UAAA,YAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AAEA,YAAA,YAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,UAAA,YAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AAEA,YAAA,YAAA,IAAA,UAAA,CAAA,SAAA,CAAA,IAAA,EAAA;AACA,UAAA,YAAA,GAAA,UAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,YAAA;AACA,aAAA,SAAA,CAAA,CAAA,GAAA,YAAA;AACA;AACA,KA7GA;AA+GA,IAAA,WA/GA,uBA+GA,CA/GA,EA+GA;AACA,WAAA,QAAA,GAAA,IAAA;AACA,UAAA,OAAA,GAAA,CAAA,CAAA,IAAA,KAAA,YAAA,GACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OADA,GAEA,CAAA,CAAA,OAFA;AAGA,UAAA,OAAA,GAAA,CAAA,CAAA,IAAA,KAAA,YAAA,GACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,OADA,GAEA,CAAA,CAAA,OAFA;AAGA,WAAA,MAAA,GAAA,KAAA,SAAA,CAAA,CAAA,GAAA,OAAA;AACA,WAAA,MAAA,GAAA,KAAA,SAAA,CAAA,CAAA,GAAA,OAAA;;AACA,UAAA,CAAA,CAAA,IAAA,KAAA,YAAA,IAAA,CAAA,CAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,aAAA,kBAAA,GAAA,IAAA,CAAA,KAAA,CACA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KADA,EAEA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,CAAA,OAAA,CAAA,CAAA,EAAA,KAFA,CAAA;AAIA;AACA,KA/HA;AAiIA,IAAA,SAjIA,uBAiIA;AACA,WAAA,QAAA,GAAA,KAAA;AACA,WAAA,YAAA;AACA,KApIA;AAsIA,IAAA,OAtIA,mBAsIA,CAtIA,EAsIA;AAAA;;AACA,UAAA,KAAA;;AACA,UAAA,CAAA,CAAA,UAAA,EAAA;AACA,QAAA,KAAA,GAAA,CAAA,CAAA,UAAA,GAAA,IAAA;AACA,OAFA,MAEA,IAAA,CAAA,CAAA,MAAA,EAAA;AACA,QAAA,KAAA,GAAA,CAAA,CAAA,MAAA,GAAA,IAAA;AACA,OAFA,MAEA,IAAA,CAAA,CAAA,MAAA,EAAA;AACA,QAAA,KAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,OAFA,MAEA;AACA,QAAA,KAAA,GAAA,CAAA;AACA;;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,GAAA,KAAA,GAAA,KAAA,KAAA;AACA,WAAA,KAAA,GAAA,QAAA,IAAA,KAAA,QAAA,GACA,KAAA,QADA,GAEA,QAAA,GAAA,KAAA,QAAA,GACA,KAAA,QADA,GAEA,QAJA;AAKA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,MAAA;AACA,OAFA;AAGA,KA1JA;AA4JA,IAAA,OA5JA,mBA4JA,KA5JA,EA4JA;AAAA;;AACA,UAAA,QAAA,GAAA,KAAA,KAAA,GAAA,KAAA,GAAA,IAAA,GAAA,KAAA,KAAA;AACA,WAAA,KAAA,GAAA,QAAA,IAAA,KAAA,QAAA,GACA,KAAA,QADA,GAEA,QAAA,GAAA,KAAA,QAAA,GACA,KAAA,QADA,GAEA,QAJA;AAKA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,MAAA;AACA,OAFA;AAGA,KAtKA;AAwKA,IAAA,aAxKA,2BAwKA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA;AACA,UAAA,aAAA,GAAA,KAAA,WAAA,GAAA,KAAA;AACA,UAAA,cAAA,GAAA,KAAA,WAAA,GAAA,MAAA;AACA,UAAA,mBAAA,GAAA,KAAA,GAAA,CAAA,WAAA,GAAA,CAAA;AACA,UAAA,mBAAA,GAAA,KAAA,GAAA,CAAA,YAAA,GAAA,CAAA;AACA,UAAA,OAAA,GAAA,KAAA,YAAA,EAAA;AACA,UAAA,WAAA,GAAA,OAAA,CAAA,KAAA;AACA,UAAA,YAAA,GAAA,OAAA,CAAA,MAAA;AACA,UAAA,SAAA,GAAA,aAAA,GAAA,CAAA;AACA,UAAA,UAAA,GAAA,cAAA,GAAA,CAAA;AAEA,UAAA,IAAA,GAAA,CAAA,SAAA,GAAA,KAAA,GAAA,mBAAA,IAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,WAAA,IAAA,IAAA,KAAA,CAAA,GAAA,aAAA,IAAA,IAAA,KAAA,CAAA,CAAA;AAEA,UAAA,IAAA,GAAA,CAAA,UAAA,GAAA,KAAA,GAAA,mBAAA,IAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,IAAA,YAAA,IAAA,IAAA,KAAA,CAAA,GAAA,cAAA,IAAA,IAAA,KAAA,CAAA,CAAA;AAEA,UAAA,UAAA,GAAA,IAAA,KAAA,GAAA,SAAA;AACA,UAAA,UAAA,GAAA,WAAA,IAAA,IAAA,KAAA,CAAA,GAAA,UAAA;AAEA,UAAA,UAAA,GAAA,IAAA,KAAA,GAAA,UAAA;AACA,UAAA,UAAA,GAAA,YAAA,IAAA,IAAA,KAAA,CAAA,GAAA,UAAA;AAEA,aAAA;AACA,QAAA,SAAA,EAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,IAAA,EAAA,IAHA;AAIA,UAAA,IAAA,EAAA;AAJA,SADA;AAQA,QAAA,MAAA,EAAA;AACA,UAAA,IAAA,EAAA,UADA;AAEA,UAAA,IAAA,EAAA,UAFA;AAGA,UAAA,IAAA,EAAA,UAHA;AAIA,UAAA,IAAA,EAAA;AAJA;AARA,OAAA;AAeA,KA/MA;AAiNA,IAAA,IAjNA,kBAiNA;AAAA;;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AACA,WAAA,GAAA,CAAA,WAAA,CAAA,QAAA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,MAAA,QAAA,CAAA,KAAA,GAAA,KAAA,SAAA;AACA,MAAA,QAAA,CAAA,MAAA,GAAA,KAAA,UAAA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,YAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,MAAA,GAAA,CAAA,SAAA,CACA,KAAA,KAAA,CAAA,KADA,EAEA,KAAA,KAAA,CAAA,KAAA,CAAA,YAAA,GAAA,CAAA,GAAA,KAAA,WAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,KAAA,GAAA,CAAA,GAAA,KAAA,SAAA,CAAA,CAAA,GAAA,KAFA,EAGA,KAAA,KAAA,CAAA,KAAA,CAAA,aAAA,GAAA,CAAA,GAAA,KAAA,WAAA,GAAA,MAAA,GAAA,KAAA,GAAA,KAAA,KAAA,GAAA,CAAA,GAAA,KAAA,SAAA,CAAA,CAAA,GAAA,KAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,gBAAA,GAAA,MAAA,IAAA,KAAA,KAAA,CAAA,KAAA,CAAA,MAAA,IAAA,KAAA,GAAA,CAHA,EAIA,KAAA,WAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,KAJA,EAKA,KAAA,WAAA,GAAA,MAAA,GAAA,KAAA,GAAA,KAAA,KALA,EAMA,CANA,EAMA,CANA,EAMA,KAAA,SANA,EAMA,KAAA,UANA;AAQA,WAAA,SAAA,CAAA,YAAA;AACA,YAAA,OAAA,GAAA,QAAA,CAAA,SAAA,CAAA,WAAA,CAAA;;AACA,QAAA,MAAA,CAAA,KAAA,CAAA,MAAA,EAAA,OAAA;AACA,OAHA;AAIA,KArOA;AAuOA,IAAA,YAvOA,0BAuOA;AACA,UAAA,oBAAA,GAAA,KAAA,KAAA,CAAA,QAAA,CAAA,qBAAA,EAAA;AACA,UAAA,iBAAA,GAAA,KAAA,KAAA,CAAA,KAAA,CAAA,qBAAA,EAAA;AACA,UAAA,cAAA,GAAA,KAAA,MAAA;AACA,WAAA,MAAA,CAAA,CAAA,GAAA,CAAA,oBAAA,CAAA,IAAA,GAAA,iBAAA,CAAA,IAAA,GAAA,oBAAA,CAAA,KAAA,GAAA,CAAA,IAAA,KAAA,KAAA;AACA,WAAA,MAAA,CAAA,CAAA,GAAA,CAAA,oBAAA,CAAA,GAAA,GAAA,iBAAA,CAAA,GAAA,GAAA,oBAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,KAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,CAAA,KAAA,MAAA,CAAA,CAAA,GAAA,cAAA,CAAA,CAAA,KAAA,IAAA,KAAA,KAAA,CAAA;AACA,WAAA,SAAA,CAAA,CAAA,IAAA,CAAA,KAAA,MAAA,CAAA,CAAA,GAAA,cAAA,CAAA,CAAA,KAAA,IAAA,KAAA,KAAA,CAAA;AACA;AA/OA;AAtDA,CAAA","sourcesContent":["<template>\n  <div\n    class=\"base-image-cropper\"\n    @mousedown.prevent=\"onMousedown\"\n    @touchstart.prevent=\"onMousedown\"\n    @wheel.prevent=\"onWheel\"\n  >\n    <div\n      v-show=\"loading\"\n      class=\"loading-view\"\n    >\n      <div class=\"loading-content\">\n        Loading...\n      </div>\n    </div>\n    <div\n      v-show=\"!loading\"\n      class=\"content\"\n      ref=\"container\"\n    >\n      <button\n        class=\"save-button\"\n        @click=\"crop\"\n        @touchstart.stop\n      >\n        Save\n      </button>\n        <div\n          class=\"crop-area\"\n          ref=\"cropArea\"\n          :style=\"{\n            'width': `${cropWidth}px`,\n            'height': `${cropHeight}px`,\n            'transform': `translate3d(-50%, -50%, 0) scale(${cropScale})`\n          }\"\n        ></div>\n        <img\n          v-if=\"showImage\"\n          class=\"image\"\n          ref=\"image\"\n          crossorigin=\"anonymous\"\n          :src=\"src\"\n          :style=\"{\n            'transform': `translate3d(${translate.x}px, ${translate.y}px, 0) scale(${scale})`,\n            'transform-origin': `${origin.x}px ${origin.y}px`\n          }\"\n          @load=\"init\"\n        >\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    src: {\n      type: String,\n      default: ''\n    },\n\n    cropWidth: {\n      type: Number,\n      default: 300\n    },\n\n    cropHeight: {\n      type: Number,\n      default: 300\n    }\n  },\n\n  data () {\n    return {\n      loading: true,\n      showImage: false,\n      dragging: false,\n      startX: 0,\n      startY: 0,\n      translate: { x: 0, y: 0 },\n      origin: { x: 'center', y: 'center' },\n      scale: 1,\n      maxScale: 1,\n      minScale: 1,\n      cropScale: 1,\n      startTouchDistance: 0\n    }\n  },\n\n  mounted () {\n    window.addEventListener('mousemove', this.onMousemove)\n    window.addEventListener('touchmove', this.onMousemove)\n    window.addEventListener('mouseup', this.onMouseup)\n    window.addEventListener('touchend', this.onMouseup)\n    window.addEventListener('resize', this.onResize)\n    setTimeout(() => {\n      this.showImage = true\n    }, 150)\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('mousemove', this.onMousemove)\n    window.removeEventListener('touchmove', this.onMousemove)\n    window.removeEventListener('mouseup', this.onMouseup)\n    window.removeEventListener('touchend', this.onMouseup)\n    window.removeEventListener('resize', this.onResize)\n  },\n\n  methods: {\n    init () {\n      this.loading = false\n      this.$nextTick(() => {\n        if (!this.$refs.image) {\n          return\n        }\n        const containerRect = this.getContainerRect()\n        this.updateCropScale()\n        this.maxScale = this.$refs.image.naturalWidth / this.$refs.image.width\n        this.minScale = this.cropWidth < containerRect.width && this.cropHeight < containerRect.height\n          ? Math.max(this.cropWidth / this.$refs.image.width, this.cropHeight / this.$refs.image.height)\n          : 1\n\n        this.scale = this.maxScale\n        this.translate.y = (this.getCropRect().top - this.getImageRect().top) - (this.getImageRect().height - this.getCropRect().height) / 2\n      })\n    },\n\n    getContainerRect () {\n      return this.$refs.container.getBoundingClientRect()\n    },\n\n    getImageRect () {\n      if (!this.$refs.image) {\n        return { width: this.cropWidth, height: this.cropHeight }\n      }\n      return this.$refs.image.getBoundingClientRect()\n    },\n\n    getCropRect () {\n      return this.$refs.cropArea.getBoundingClientRect()\n    },\n\n    updateCropScale () {\n      const containerRect = this.getContainerRect()\n      this.cropScale = this.cropWidth < containerRect.width && this.cropHeight < containerRect.height\n        ? 1\n        : Math.min(containerRect.width / this.cropWidth, containerRect.height / this.cropHeight)\n    },\n\n    onResize () {\n      this.init()\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    onZoom () {\n      const boundaries = this.getBoundaries()\n      if (this.translate.x >= boundaries.translate.maxX) {\n        this.translate.x = boundaries.translate.maxX\n        this.origin.x = boundaries.origin.minX\n      }\n\n      if (this.translate.x <= boundaries.translate.minX) {\n        this.translate.x = boundaries.translate.minX\n        this.origin.x = boundaries.origin.maxX\n      }\n\n      if (this.translate.y >= boundaries.translate.maxY) {\n        this.origin.y = boundaries.origin.minY\n        this.translate.y = boundaries.translate.maxY\n      }\n\n      if (this.translate.y <= boundaries.translate.minY) {\n        this.origin.y = boundaries.origin.maxY\n        this.translate.y = boundaries.translate.minY\n      }\n    },\n\n    onMousemove (e) {\n      if (e.type === 'touchmove' && e.touches.length === 2) {\n        const endTouchDistance = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        )\n        const touchesDelta = endTouchDistance - this.startTouchDistance\n        this.onPinch(touchesDelta)\n      } else if (this.dragging) {\n        this.updateOrigin()\n        const boundaries = this.getBoundaries()\n        const clientX = e.type === 'touchmove'\n          ? e.touches[0].clientX\n          : e.clientX\n        const clientY = e.type === 'touchmove'\n          ? e.touches[0].clientY\n          : e.clientY\n        let newXPosition = clientX + this.startX\n        let newYPosition = clientY + this.startY\n\n        if (newXPosition >= boundaries.translate.maxX) {\n          newXPosition = boundaries.translate.maxX\n        }\n\n        if (newXPosition <= boundaries.translate.minX) {\n          newXPosition = boundaries.translate.minX\n        }\n\n        if (newYPosition >= boundaries.translate.maxY) {\n          newYPosition = boundaries.translate.maxY\n        }\n\n        if (newYPosition <= boundaries.translate.minY) {\n          newYPosition = boundaries.translate.minY\n        }\n        this.translate.x = newXPosition\n        this.translate.y = newYPosition\n      }\n    },\n\n    onMousedown (e) {\n      this.dragging = true\n      const clientX = e.type === 'touchstart'\n        ? e.touches[0].clientX\n        : e.clientX\n      const clientY = e.type === 'touchstart'\n        ? e.touches[0].clientY\n        : e.clientY\n      this.startX = this.translate.x - clientX\n      this.startY = this.translate.y - clientY\n      if (e.type === 'touchstart' && e.touches.length === 2) {\n        this.startTouchDistance = Math.hypot(\n          e.touches[0].pageX - e.touches[1].pageX,\n          e.touches[0].pageY - e.touches[1].pageY\n        )\n      }\n    },\n\n    onMouseup () {\n      this.dragging = false\n      this.updateOrigin()\n    },\n\n    onWheel (e) {\n      let delta\n      if (e.wheelDelta) {\n        delta = e.wheelDelta / 1200\n      } else if (e.deltaY) {\n        delta = e.deltaY / 1060\n      } else if (e.detail) {\n        delta = e.detail / -60\n      } else {\n        delta = 0\n      }\n      const newScale = this.scale + (delta * this.scale)\n      this.scale = newScale <= this.minScale\n        ? this.minScale\n        : newScale > this.maxScale\n          ? this.maxScale\n          : newScale\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    onPinch (delta) {\n      const newScale = this.scale + (delta / 1200 * this.scale)\n      this.scale = newScale <= this.minScale\n        ? this.minScale\n        : newScale > this.maxScale\n          ? this.maxScale\n          : newScale\n      this.$nextTick(() => {\n        this.onZoom()\n      })\n    },\n\n    getBoundaries () {\n      const scale = this.scale\n      const cropAreaWidth = this.getCropRect().width\n      const cropAreaHeight = this.getCropRect().height\n      const centerFromBoundaryX = this.$el.clientWidth / 2\n      const centerFromBoundaryY = this.$el.clientHeight / 2\n      const imgRect = this.getImageRect()\n      const curImgWidth = imgRect.width\n      const curImgHeight = imgRect.height\n      const halfWidth = cropAreaWidth / 2\n      const halfHeight = cropAreaHeight / 2\n\n      const maxX = ((halfWidth / scale) - centerFromBoundaryX) * -1\n      const minX = maxX - ((curImgWidth * (1 / scale)) - (cropAreaWidth * (1 / scale)))\n\n      const maxY = ((halfHeight / scale) - centerFromBoundaryY) * -1\n      const minY = maxY - ((curImgHeight * (1 / scale)) - (cropAreaHeight * (1 / scale)))\n\n      const originMinX = (1 / scale) * halfWidth\n      const originMaxX = (curImgWidth * (1 / scale)) - originMinX\n\n      const originMinY = (1 / scale) * halfHeight\n      const originMaxY = (curImgHeight * (1 / scale)) - originMinY\n\n      return {\n        translate: {\n          maxX: maxX,\n          minX: minX,\n          maxY: maxY,\n          minY: minY\n        },\n\n        origin: {\n          maxX: originMaxX,\n          minX: originMinX,\n          maxY: originMaxY,\n          minY: originMinY\n        }\n      }\n    },\n\n    crop () {\n      const canvasEl = document.createElement('canvas')\n      canvasEl.style.display = 'none'\n      this.$el.appendChild(canvasEl)\n      const ctx = canvasEl.getContext('2d')\n      canvasEl.width = this.cropWidth\n      canvasEl.height = this.cropHeight\n      const ratio = this.$refs.image.naturalWidth / this.$refs.image.width\n      ctx.drawImage(\n        this.$refs.image,\n        (this.$refs.image.naturalWidth / 2) - (this.getCropRect().width * ratio / this.scale / 2) - (this.translate.x * ratio),\n        (this.$refs.image.naturalHeight / 2) - (this.getCropRect().height * ratio / this.scale / 2) - (this.translate.y * ratio) + ((Math.round(this.getContainerRect().height) - this.$refs.image.height) * ratio / 2),\n        this.getCropRect().width * ratio / this.scale,\n        this.getCropRect().height * ratio / this.scale,\n        0, 0, this.cropWidth, this.cropHeight\n      )\n      this.$nextTick(() => {\n        const dataURL = canvasEl.toDataURL('image/png')\n        this.$emit('crop', dataURL)\n      })\n    },\n\n    updateOrigin () {\n      const cropAreaBoundingRect = this.$refs.cropArea.getBoundingClientRect()\n      const imageBoundingRect = this.$refs.image.getBoundingClientRect()\n      const previousOrigin = this.origin\n      this.origin.x = ((cropAreaBoundingRect.left - imageBoundingRect.left) + (cropAreaBoundingRect.width / 2)) / this.scale\n      this.origin.y = ((cropAreaBoundingRect.top - imageBoundingRect.top) + (cropAreaBoundingRect.height / 2)) / this.scale\n      this.translate.x -= (this.origin.x - previousOrigin.x) * (1 - this.scale)\n      this.translate.y -= (this.origin.y - previousOrigin.y) * (1 - this.scale)\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\" scoped>\n.content\n  background: #222\n  width: 100%\n  height: 100%\n  overflow: hidden\n  position: relative\n  display: block\n  cursor: move\n  border-radius: 3px\n\n.image\n  max-width: 100%\n  display: flex\n  pointer-events: all\n\n.image-container\n  position: relative\n\n.crop-area\n  position: absolute\n  left: 50%\n  top: 50%\n  z-index: 1\n  transform: translate(-50%, -50%)\n  border: 2px solid rgba(255, 255, 255, 0.8)\n  box-shadow: 0 0 2000px 2000px rgba(0, 0, 0, 0.8)\n  pointer-events: none\n\n.save-button\n  height: 35px\n  padding: 0 20px\n  border: none\n  border-radius: 35px\n  background: #2288AA\n  color: #FFF\n  cursor: pointer\n  position: absolute\n  top: 10px\n  right: 10px\n  z-index: 2\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 16px\n  font-family: 'Helvetica'\n  outline: 0\n  transition: 0.2s background ease-out\n  font-family 'Avenir', Helvetica, Arial, sans-serif\n  -webkit-font-smoothing antialiased\n  -moz-osx-font-smoothing grayscale\n  font-weight: 500\n\n.save-button:hover\n  background: lighten(#2288AA, 10%)\n\n.loading-view\n  position: absolute\n  z-index: 1\n  top: 0\n  left: 0\n  width: 100%\n  height: 100%\n  background: #222\n  border-radius: 3px\n  color: #FFF\n  display: flex\n  justify-content: center\n  align-items: center\n  font-size: 20px\n\n.loading-content\n  background: rgba(255, 255, 255, 0.1)\n  padding: 10px 20px\n  display: flex\n  align-items: center\n  border-radius: 24px\n</style>\n"],"sourceRoot":"src/components"}]}